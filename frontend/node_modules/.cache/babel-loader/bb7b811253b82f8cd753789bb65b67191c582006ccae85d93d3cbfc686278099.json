{"ast":null,"code":"var _jsxFileName = \"/Users/shwetamprajapati/Downloads/ecommerce/frontend/src/context/CartContext.js\";\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nexport const useCart = () => {\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\nexport const CartProvider = ({\n  children\n}) => {\n  const [cartItems, setCartItems] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const {\n    isAuthenticated,\n    user\n  } = useAuth();\n\n  // Load cart from localStorage on mount\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      loadCart();\n    } else {\n      setCartItems([]);\n    }\n  }, [isAuthenticated, user]);\n  const loadCart = async () => {\n    try {\n      setLoading(true);\n      // Try backend first\n      const response = await axios.get('/api/cart/');\n      setCartItems(response.data.cartItems || []);\n    } catch (error) {\n      console.error('Backend cart failed, using mock data:', error);\n      // Load from localStorage for mock functionality\n      const savedCart = localStorage.getItem(`cart_${user === null || user === void 0 ? void 0 : user.id}`);\n      if (savedCart) {\n        setCartItems(JSON.parse(savedCart));\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  const addToCart = async (product, quantity = 1) => {\n    if (!isAuthenticated) {\n      alert('Please login to add items to cart');\n      return {\n        success: false\n      };\n    }\n    try {\n      setLoading(true);\n      // Try backend first\n      await axios.put('/api/cart/add', {\n        productId: product.id,\n        quantity: quantity\n      });\n\n      // Reload cart from backend\n      await loadCart();\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Backend add to cart failed, using mock:', error);\n\n      // Mock cart functionality\n      const existingItemIndex = cartItems.findIndex(item => item.product.id === product.id);\n      let updatedCart;\n      if (existingItemIndex >= 0) {\n        // Update existing item\n        updatedCart = cartItems.map((item, index) => index === existingItemIndex ? {\n          ...item,\n          quantity: item.quantity + quantity\n        } : item);\n      } else {\n        // Add new item\n        const newItem = {\n          id: Date.now(),\n          product: product,\n          quantity: quantity,\n          price: product.discountedPrice || product.price\n        };\n        updatedCart = [...cartItems, newItem];\n      }\n      setCartItems(updatedCart);\n      // Save to localStorage\n      localStorage.setItem(`cart_${user.id}`, JSON.stringify(updatedCart));\n      return {\n        success: true\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const removeFromCart = async itemId => {\n    try {\n      setLoading(true);\n      // Try backend first\n      await axios.delete(`/api/cart/cartItems/${itemId}`);\n      await loadCart();\n    } catch (error) {\n      console.error('Backend remove failed, using mock:', error);\n\n      // Mock remove functionality\n      const updatedCart = cartItems.filter(item => item.id !== itemId);\n      setCartItems(updatedCart);\n      localStorage.setItem(`cart_${user.id}`, JSON.stringify(updatedCart));\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateQuantity = async (itemId, newQuantity) => {\n    if (newQuantity <= 0) {\n      await removeFromCart(itemId);\n      return;\n    }\n    try {\n      setLoading(true);\n      // Try backend first\n      await axios.put(`/api/cart/cartItems/${itemId}`, {\n        quantity: newQuantity\n      });\n      await loadCart();\n    } catch (error) {\n      console.error('Backend update failed, using mock:', error);\n\n      // Mock update functionality\n      const updatedCart = cartItems.map(item => item.id === itemId ? {\n        ...item,\n        quantity: newQuantity\n      } : item);\n      setCartItems(updatedCart);\n      localStorage.setItem(`cart_${user.id}`, JSON.stringify(updatedCart));\n    } finally {\n      setLoading(false);\n    }\n  };\n  const clearCart = async () => {\n    try {\n      setLoading(true);\n      // Try backend first\n      await axios.delete('/api/cart/clear');\n      setCartItems([]);\n    } catch (error) {\n      console.error('Backend clear failed, using mock:', error);\n\n      // Mock clear functionality\n      setCartItems([]);\n      localStorage.removeItem(`cart_${user.id}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getCartTotal = () => {\n    return cartItems.reduce((total, item) => {\n      return total + item.price * item.quantity;\n    }, 0);\n  };\n  const getCartItemCount = () => {\n    return cartItems.reduce((total, item) => total + item.quantity, 0);\n  };\n  const value = {\n    cartItems,\n    loading,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    clearCart,\n    getCartTotal,\n    getCartItemCount,\n    loadCart\n  };\n\n  // Debug logging\n  console.log('CartContext Debug:', {\n    cartItemsLength: cartItems.length,\n    cartItemCount: getCartItemCount(),\n    isAuthenticated,\n    userId: user === null || user === void 0 ? void 0 : user.id\n  });\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","useAuth","jsxDEV","_jsxDEV","CartContext","useCart","context","Error","CartProvider","children","cartItems","setCartItems","loading","setLoading","isAuthenticated","user","loadCart","response","get","data","error","console","savedCart","localStorage","getItem","id","JSON","parse","addToCart","product","quantity","alert","success","put","productId","existingItemIndex","findIndex","item","updatedCart","map","index","newItem","Date","now","price","discountedPrice","setItem","stringify","removeFromCart","itemId","delete","filter","updateQuantity","newQuantity","clearCart","removeItem","getCartTotal","reduce","total","getCartItemCount","value","log","cartItemsLength","length","cartItemCount","userId","Provider","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/shwetamprajapati/Downloads/ecommerce/frontend/src/context/CartContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useAuth } from './AuthContext';\n\nconst CartContext = createContext();\n\nexport const useCart = () => {\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\n\nexport const CartProvider = ({ children }) => {\n  const [cartItems, setCartItems] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const { isAuthenticated, user } = useAuth();\n\n  // Load cart from localStorage on mount\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      loadCart();\n    } else {\n      setCartItems([]);\n    }\n  }, [isAuthenticated, user]);\n\n  const loadCart = async () => {\n    try {\n      setLoading(true);\n      // Try backend first\n      const response = await axios.get('/api/cart/');\n      setCartItems(response.data.cartItems || []);\n    } catch (error) {\n      console.error('Backend cart failed, using mock data:', error);\n      // Load from localStorage for mock functionality\n      const savedCart = localStorage.getItem(`cart_${user?.id}`);\n      if (savedCart) {\n        setCartItems(JSON.parse(savedCart));\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const addToCart = async (product, quantity = 1) => {\n    if (!isAuthenticated) {\n      alert('Please login to add items to cart');\n      return { success: false };\n    }\n\n    try {\n      setLoading(true);\n      // Try backend first\n      await axios.put('/api/cart/add', {\n        productId: product.id,\n        quantity: quantity\n      });\n      \n      // Reload cart from backend\n      await loadCart();\n      return { success: true };\n    } catch (error) {\n      console.error('Backend add to cart failed, using mock:', error);\n      \n      // Mock cart functionality\n      const existingItemIndex = cartItems.findIndex(item => item.product.id === product.id);\n      let updatedCart;\n      \n      if (existingItemIndex >= 0) {\n        // Update existing item\n        updatedCart = cartItems.map((item, index) => \n          index === existingItemIndex \n            ? { ...item, quantity: item.quantity + quantity }\n            : item\n        );\n      } else {\n        // Add new item\n        const newItem = {\n          id: Date.now(),\n          product: product,\n          quantity: quantity,\n          price: product.discountedPrice || product.price\n        };\n        updatedCart = [...cartItems, newItem];\n      }\n      \n      setCartItems(updatedCart);\n      // Save to localStorage\n      localStorage.setItem(`cart_${user.id}`, JSON.stringify(updatedCart));\n      \n      return { success: true };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const removeFromCart = async (itemId) => {\n    try {\n      setLoading(true);\n      // Try backend first\n      await axios.delete(`/api/cart/cartItems/${itemId}`);\n      await loadCart();\n    } catch (error) {\n      console.error('Backend remove failed, using mock:', error);\n      \n      // Mock remove functionality\n      const updatedCart = cartItems.filter(item => item.id !== itemId);\n      setCartItems(updatedCart);\n      localStorage.setItem(`cart_${user.id}`, JSON.stringify(updatedCart));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateQuantity = async (itemId, newQuantity) => {\n    if (newQuantity <= 0) {\n      await removeFromCart(itemId);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      // Try backend first\n      await axios.put(`/api/cart/cartItems/${itemId}`, {\n        quantity: newQuantity\n      });\n      await loadCart();\n    } catch (error) {\n      console.error('Backend update failed, using mock:', error);\n      \n      // Mock update functionality\n      const updatedCart = cartItems.map(item => \n        item.id === itemId \n          ? { ...item, quantity: newQuantity }\n          : item\n      );\n      setCartItems(updatedCart);\n      localStorage.setItem(`cart_${user.id}`, JSON.stringify(updatedCart));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const clearCart = async () => {\n    try {\n      setLoading(true);\n      // Try backend first\n      await axios.delete('/api/cart/clear');\n      setCartItems([]);\n    } catch (error) {\n      console.error('Backend clear failed, using mock:', error);\n      \n      // Mock clear functionality\n      setCartItems([]);\n      localStorage.removeItem(`cart_${user.id}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getCartTotal = () => {\n    return cartItems.reduce((total, item) => {\n      return total + (item.price * item.quantity);\n    }, 0);\n  };\n\n  const getCartItemCount = () => {\n    return cartItems.reduce((total, item) => total + item.quantity, 0);\n  };\n\n  const value = {\n    cartItems,\n    loading,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    clearCart,\n    getCartTotal,\n    getCartItemCount,\n    loadCart\n  };\n\n  // Debug logging\n  console.log('CartContext Debug:', {\n    cartItemsLength: cartItems.length,\n    cartItemCount: getCartItemCount(),\n    isAuthenticated,\n    userId: user?.id\n  });\n\n  return (\n    <CartContext.Provider value={value}>\n      {children}\n    </CartContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}