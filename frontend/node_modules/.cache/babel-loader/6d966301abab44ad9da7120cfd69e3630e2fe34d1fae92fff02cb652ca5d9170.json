{"ast":null,"code":"var _jsxFileName = \"/Users/shwetamprajapati/Downloads/ecommerce/frontend/src/context/AuthContext.js\";\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [loading, setLoading] = useState(true);\n\n  // Set up axios interceptor for authentication\n  useEffect(() => {\n    if (token) {\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      // Verify token validity\n      verifyToken();\n    } else {\n      delete axios.defaults.headers.common['Authorization'];\n      setLoading(false);\n    }\n  }, [token]);\n  const verifyToken = async () => {\n    try {\n      // Check if it's a mock token\n      if (token && token.startsWith('mock-jwt-token-')) {\n        // For mock tokens, restore user from localStorage\n        const existingUsers = JSON.parse(localStorage.getItem('mockUsers') || '[]');\n        const mockUser = existingUsers.find(user => user.email);\n        if (mockUser) {\n          setUser({\n            id: mockUser.id,\n            firstName: mockUser.firstName,\n            lastName: mockUser.lastName,\n            email: mockUser.email,\n            role: mockUser.role\n          });\n        } else {\n          // Default mock user for demo token\n          setUser({\n            id: 1,\n            firstName: 'Test',\n            lastName: 'User',\n            email: 'test@example.com',\n            role: 'CUSTOMER'\n          });\n        }\n        setLoading(false);\n        return;\n      }\n\n      // Try real backend verification\n      const response = await axios.get('/api/users/profile');\n      setUser(response.data);\n    } catch (error) {\n      console.error('Token verification failed:', error);\n      // Only logout if it's not a mock token\n      if (!token || !token.startsWith('mock-jwt-token-')) {\n        logout();\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      // Try backend first\n      const response = await axios.post('/auth/signin', {\n        email,\n        password\n      });\n      const {\n        jwt\n      } = response.data;\n      setToken(jwt);\n      localStorage.setItem('token', jwt);\n\n      // Get user profile\n      const userResponse = await axios.get('/api/users/profile', {\n        headers: {\n          Authorization: `Bearer ${jwt}`\n        }\n      });\n      setUser(userResponse.data);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Backend login failed, using mock data:', error);\n\n      // Mock login for frontend testing when backend is not available\n      const existingUsers = JSON.parse(localStorage.getItem('mockUsers') || '[]');\n\n      // Check for demo credentials first\n      if (email === 'test@example.com' && password === 'password123') {\n        const mockToken = 'mock-jwt-token-' + Date.now();\n        const mockUser = {\n          id: 1,\n          firstName: 'Test',\n          lastName: 'User',\n          email: email,\n          role: 'CUSTOMER'\n        };\n        setToken(mockToken);\n        localStorage.setItem('token', mockToken);\n        setUser(mockUser);\n        return {\n          success: true\n        };\n      }\n\n      // Check for registered users from signup\n      const foundUser = existingUsers.find(user => user.email === email && user.password === password);\n      if (foundUser) {\n        const mockToken = 'mock-jwt-token-' + Date.now();\n        const mockUser = {\n          id: foundUser.id,\n          firstName: foundUser.firstName,\n          lastName: foundUser.lastName,\n          email: foundUser.email,\n          role: foundUser.role\n        };\n        setToken(mockToken);\n        localStorage.setItem('token', mockToken);\n        setUser(mockUser);\n        return {\n          success: true\n        };\n      }\n      return {\n        success: false,\n        error: 'Invalid credentials. Please sign up first or use test@example.com / password123 for demo.'\n      };\n    }\n  };\n  const signup = async userData => {\n    try {\n      // Try backend first\n      const response = await axios.post('/auth/signup', userData);\n      const {\n        jwt\n      } = response.data;\n      setToken(jwt);\n      localStorage.setItem('token', jwt);\n\n      // Get user profile\n      const userResponse = await axios.get('/api/users/profile', {\n        headers: {\n          Authorization: `Bearer ${jwt}`\n        }\n      });\n      setUser(userResponse.data);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Backend signup failed, using mock data:', error);\n\n      // Store user credentials for future login\n      const existingUsers = JSON.parse(localStorage.getItem('mockUsers') || '[]');\n      const newUser = {\n        id: Date.now(),\n        firstName: userData.firstName,\n        lastName: userData.lastName,\n        email: userData.email,\n        password: userData.password,\n        role: 'CUSTOMER'\n      };\n      existingUsers.push(newUser);\n      localStorage.setItem('mockUsers', JSON.stringify(existingUsers));\n\n      // Mock signup for frontend testing when backend is not available\n      const mockToken = 'mock-jwt-token-' + Date.now();\n      const mockUser = {\n        id: newUser.id,\n        firstName: userData.firstName,\n        lastName: userData.lastName,\n        email: userData.email,\n        role: 'CUSTOMER'\n      };\n      setToken(mockToken);\n      localStorage.setItem('token', mockToken);\n      setUser(mockUser);\n      return {\n        success: true\n      };\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem('token');\n    delete axios.defaults.headers.common['Authorization'];\n  };\n  const value = {\n    user,\n    token,\n    loading,\n    login,\n    signup,\n    logout,\n    isAuthenticated: !!token\n  };\n\n  // Debug logging\n  console.log('AuthContext Debug:', {\n    user,\n    token: !!token,\n    isAuthenticated: !!token,\n    loading\n  });\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","useAuth","context","Error","AuthProvider","children","user","setUser","token","setToken","localStorage","getItem","loading","setLoading","defaults","headers","common","verifyToken","startsWith","existingUsers","JSON","parse","mockUser","find","email","id","firstName","lastName","role","response","get","data","error","console","logout","login","password","post","jwt","setItem","userResponse","Authorization","success","mockToken","Date","now","foundUser","signup","userData","newUser","push","stringify","removeItem","value","isAuthenticated","log","Provider","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/shwetamprajapati/Downloads/ecommerce/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [loading, setLoading] = useState(true);\n\n  // Set up axios interceptor for authentication\n  useEffect(() => {\n    if (token) {\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      // Verify token validity\n      verifyToken();\n    } else {\n      delete axios.defaults.headers.common['Authorization'];\n      setLoading(false);\n    }\n  }, [token]);\n\n  const verifyToken = async () => {\n    try {\n      // Check if it's a mock token\n      if (token && token.startsWith('mock-jwt-token-')) {\n        // For mock tokens, restore user from localStorage\n        const existingUsers = JSON.parse(localStorage.getItem('mockUsers') || '[]');\n        const mockUser = existingUsers.find(user => user.email);\n        \n        if (mockUser) {\n          setUser({\n            id: mockUser.id,\n            firstName: mockUser.firstName,\n            lastName: mockUser.lastName,\n            email: mockUser.email,\n            role: mockUser.role\n          });\n        } else {\n          // Default mock user for demo token\n          setUser({\n            id: 1,\n            firstName: 'Test',\n            lastName: 'User',\n            email: 'test@example.com',\n            role: 'CUSTOMER'\n          });\n        }\n        setLoading(false);\n        return;\n      }\n      \n      // Try real backend verification\n      const response = await axios.get('/api/users/profile');\n      setUser(response.data);\n    } catch (error) {\n      console.error('Token verification failed:', error);\n      // Only logout if it's not a mock token\n      if (!token || !token.startsWith('mock-jwt-token-')) {\n        logout();\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (email, password) => {\n    try {\n      // Try backend first\n      const response = await axios.post('/auth/signin', {\n        email,\n        password\n      });\n      \n      const { jwt } = response.data;\n      setToken(jwt);\n      localStorage.setItem('token', jwt);\n      \n      // Get user profile\n      const userResponse = await axios.get('/api/users/profile', {\n        headers: { Authorization: `Bearer ${jwt}` }\n      });\n      setUser(userResponse.data);\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Backend login failed, using mock data:', error);\n      \n      // Mock login for frontend testing when backend is not available\n      const existingUsers = JSON.parse(localStorage.getItem('mockUsers') || '[]');\n      \n      // Check for demo credentials first\n      if (email === 'test@example.com' && password === 'password123') {\n        const mockToken = 'mock-jwt-token-' + Date.now();\n        const mockUser = {\n          id: 1,\n          firstName: 'Test',\n          lastName: 'User',\n          email: email,\n          role: 'CUSTOMER'\n        };\n        \n        setToken(mockToken);\n        localStorage.setItem('token', mockToken);\n        setUser(mockUser);\n        \n        return { success: true };\n      }\n      \n      // Check for registered users from signup\n      const foundUser = existingUsers.find(user => \n        user.email === email && user.password === password\n      );\n      \n      if (foundUser) {\n        const mockToken = 'mock-jwt-token-' + Date.now();\n        const mockUser = {\n          id: foundUser.id,\n          firstName: foundUser.firstName,\n          lastName: foundUser.lastName,\n          email: foundUser.email,\n          role: foundUser.role\n        };\n        \n        setToken(mockToken);\n        localStorage.setItem('token', mockToken);\n        setUser(mockUser);\n        \n        return { success: true };\n      }\n      \n      return { \n        success: false, \n        error: 'Invalid credentials. Please sign up first or use test@example.com / password123 for demo.' \n      };\n    }\n  };\n\n  const signup = async (userData) => {\n    try {\n      // Try backend first\n      const response = await axios.post('/auth/signup', userData);\n      \n      const { jwt } = response.data;\n      setToken(jwt);\n      localStorage.setItem('token', jwt);\n      \n      // Get user profile\n      const userResponse = await axios.get('/api/users/profile', {\n        headers: { Authorization: `Bearer ${jwt}` }\n      });\n      setUser(userResponse.data);\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Backend signup failed, using mock data:', error);\n      \n      // Store user credentials for future login\n      const existingUsers = JSON.parse(localStorage.getItem('mockUsers') || '[]');\n      const newUser = {\n        id: Date.now(),\n        firstName: userData.firstName,\n        lastName: userData.lastName,\n        email: userData.email,\n        password: userData.password,\n        role: 'CUSTOMER'\n      };\n      existingUsers.push(newUser);\n      localStorage.setItem('mockUsers', JSON.stringify(existingUsers));\n      \n      // Mock signup for frontend testing when backend is not available\n      const mockToken = 'mock-jwt-token-' + Date.now();\n      const mockUser = {\n        id: newUser.id,\n        firstName: userData.firstName,\n        lastName: userData.lastName,\n        email: userData.email,\n        role: 'CUSTOMER'\n      };\n      \n      setToken(mockToken);\n      localStorage.setItem('token', mockToken);\n      setUser(mockUser);\n      \n      return { success: true };\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem('token');\n    delete axios.defaults.headers.common['Authorization'];\n  };\n\n  const value = {\n    user,\n    token,\n    loading,\n    login,\n    signup,\n    logout,\n    isAuthenticated: !!token\n  };\n\n  // Debug logging\n  console.log('AuthContext Debug:', {\n    user,\n    token: !!token,\n    isAuthenticated: !!token,\n    loading\n  });\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}